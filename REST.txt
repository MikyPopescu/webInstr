  REST 
//functie pentru cerere lista obiecte din baza de date 
//sa trimita lista de ob clientului
//sa permita paginare cu un nr de pagini PageNo si o marime de pagina pageSize trimisi prin query

app.get('/authors', async (req, res) => {
	try{
		let pageSize = parseInt(req.query.pageSize) //preia din query parametru
		pageSize = pageSize ? parseInt(req.query.pageSize) : 5
		let authors
		let pageNo = parseInt(req.query.pageNo)  // preia din query parametru 2
		if (pageNo){                            
			authors = await Author.findAll({
				offset : pageNo * pageSize,
				limit : pageSize
			})			
		}
		else{
			authors = await Author.findAll()
		}
		res.status(200).json(authors) //cod succes - 200 
	}
	catch(err){
		console.warn(err.stack) 
		res.status(500).json({message : 'server error'})	//eroare de server - 500 	
	}
})


//functie de creare obiect implicit 
app.get('/create', async (req, res) => {
	try{
		await sequelize.sync({force : true})
		for (let i = 0; i < 10; i++){
			let author = new Author({
				name : 'name ' + i,
				email : 'name' + i + '@nowhere.com',
				address : 'some address on ' + i + 'th street'
			})
			await author.save()
		}
		res.status(201).json({message : 'created'})
	}
	catch(err){
		console.warn(err.stack)
		res.status(500).json({message : 'server error'})
	}
})

// functie - post - introducere in baza de date 
app.post('/authors', async (req, res) => {
	try{
		let author = new Author(req.body)
		await author.save()
		res.status(201).json({message : 'created'})
	}
	catch(err){
		// console.warn(err.stack)
		res.status(500).json({message : 'server error'})		
	}
})

///
 1.Daca nu exista body pt cererea http trebuie sa returnati un json cu formatul  `{message: "Body is missing"}`. Codul de raspuns trebuie sa fie: `500`;
  in post.
  app.post('/students', (req, res, next) => {
const student = req.body;
if(student.constructor === Object && Object.keys(req.body).length === 0){
    res.status(500).json({message:"Body is missing"});
}

})

2. Daca body-ul nu respecta formatul unui student returnati json-ul `{message: "Invlid body format"}`. Codul de raspuns trebuie sa fie: `500`;
if(!student.name  || !student.surname || !student.age ){
    res.status(500).json({message:"Invalid body format"});
}

3. daca varsta este mai mare ca 0 se va afisa json-ul  `{message: "Age should be a positive number"}`. Codul de raspuns trebuie sa fie: `500`; 
  if(student.age<0){
    res.status(500).json({message:"Age should be a positive number"});
}
- Daca studentul exista deja in vector, trebuie sa returnati un JSON cu urmatorul format: `{message: "Student already exists"}`.Codul de raspuns trebuie: `500`. Unicitatea se face in functie de nume;
- Daca body-ul are formatul corespunzator, studentul trebuie adaugat in vector si sa returnati un JSON cu urmatorul format: `{message: "Created"}`. Codul de raspuns trebuie sa fie: `201`;
 else if(student.age>=0) 
   {let ok=0;
    for(let i=0;i<app.locals.students.length;i++){
        if(student.name===app.locals.students[i].name){  //app.locals.students - iei lista de obiecte 
            res.status(500).json({message: "Student already exists"});
            ok=1;
        }
    }
     if(student.name&&student.surname&&student.age&&student.age>0&&ok===0){
     app.locals.students.push(student);
     res.status(201).json({message: 'Created'});
    }}


1. Put - Update
	1.1 sa se verifice daca autorul exista in baza de date 
let author = await Author.findById(req.params.id)
		if (!author){
			res.status(404).json({message : 'not found'})
		}

	1.2 Modificati autorul in baza de date 
app.put('/authors/:id', async (req, res) => {
	// add the method to modify an author
	// a non existant author cannot be updated
	// only defined fields should be updated
	try{
		let author = await Author.findById(req.params.id)
		if (!author){
			res.status(404).json({message : 'not found'})
		}
		else{
			author.name = req.body.name ? req.body.name : author.name
			author.email = req.body.email ? req.body.email : author.email
			author.address = req.body.address ? req.body.address : author.address
			author.age = req.body.age ? req.body.age : author.age
			await author.save()
			res.status(202).json({message : 'accepted'})			
		}
	}
	catch(err){
		// console.warn(err.stack)
		res.status(500).json({message : 'server error'})		
	}
})

2. Functie de delete
app.delete('/authors/:id', async (req, res) => {
	// add the method to delete an author
	// a non existant author cannot be deleted
	try{
		let author = await Author.findById(req.params.id)
		if (!author){
			res.status(404).json({message : 'not found'})
		}
		else{
			await author.destroy()
			res.status(202).json({message : 'accepted'})			
		}
	}
	catch(err){
		// console.warn(err.stack)
		res.status(500).json({message : 'server error'})		
	}

})

3. Functie post - Adaugare in bd 
app.post('/authors', async (req, res) => {
	try{
		let author = new Author(req.body)
		await author.save()
		res.status(201).json({message : 'created'})
	}
	catch(err){
		// console.warn(err.stack)
		res.status(500).json({message : 'server error'})		
	}
})


4. Functie get - un fel de Query/ Select din bd 
//exemplu de obtinere a tuturor elementelor din bd 

app.get('/authors', async (req, res) => {
	try{
		let authors = await Author.findAll()
		res.status(200).json(authors)
	}
	catch(err){
		// console.warn(err.stack)
		res.status(500).json({message : 'server error'})		
	}
})
Completare metoda POST 
 1.Daca nu exista body pentru cererea http, trebuie sa returnati un JSON cu urmatorul format: `{message: "Body is missing"}`. Codul de raspuns trebuie sa fie: `500`;
app.post('/products', (req, res, next) => {
   // res.status(500).json({message: 'Bad request'});
    try {
        // TODO
        const product = req.body;
        if (Object.keys(product).length === 0) {
            res.status(500).send({ message: 'Body is missing' })
    }
    catch (err) {
        console.warn(err.stack)
        res.status(500).json({ message: 'server error' })
    }
})

2. Daca body-ul nu respecta formatul unui produs, trebuie sa returnati un JSON cu urmatorul format: `{message: "Invlid body format"}`. Codul de raspuns trebuie sa fie: `500`;

app.post('/products', (req, res, next) => {
   // res.status(500).json({message: 'Bad request'});
    try {
        // TODO
        const product = req.body;
        if (Object.keys(product).length === 0) {
            res.status(500).send({ message: 'Body is missing' })
        }
         else if (product.name == null || product.category == null || product.price == null) {
            res.status(500).send({ message: 'Invalid body format' })
        }
        
       
    }
    catch (err) {
        console.warn(err.stack)
        res.status(500).json({ message: 'server error' })
    }
})


3. Pretul unui produs trebuie sa fie mai mare ca 0.In caz contrar trebuie sa returnati un JSON cu urmatorul format: `{message: "Price should be a positive number"}`. Codul de raspuns trebuie sa fie: `500`; 
app.post('/products', (req, res, next) => {
   // res.status(500).json({message: 'Bad request'});
    try {
        // TODO
        const product = req.body;
        if (Object.keys(product).length === 0) {
            res.status(500).send({ message: 'Body is missing' })
        }
         else if (product.name == null || product.category == null || product.price == null) {
            res.status(500).send({ message: 'Invalid body format' })
        }
        else if (product.price < 0) {
            res.status(500).send({ message: 'Price should be a positive number' })
        }
       
    }
    catch (err) {
        console.warn(err.stack)
        res.status(500).json({ message: 'server error' })
    }
})

4. Daca produsul exista deja in vector, trebuie sa returnati un JSON cu urmatorul format: `{message: "Product already exists"}`.Codul de raspuns trebuie: `500`. Unicitatea se face in functie de nume;
  else if (product.name) {
            res.status(500).send({ message: 'Product already exists' })
        }
